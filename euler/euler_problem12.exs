defmodule HighlydivisbleTriangularNumber do
  @moduledoc """
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred divisors?
  """
  use GenServer
  require Logger

  ### GenServer API
  def init(state), do: {:ok, state}

  def handle_call({:fetch, n}, _from,  state) do
    {:ok, value} = Map.fetch(state, n)
    {:reply, value, Map.update(state, n + 1, value + n + 1, &(&1))}
  end

  ### Client API / Helper functions
  def start_link(state \\ %{1 => 1}) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def fetch(n), do: GenServer.call(__MODULE__, {:fetch, n})

  # body
  @spec factors_for(pos_integer) :: [pos_integer]
  def factors_for(number), do: factorize(number, 2, [])
  defp factorize(number, factor, prime_factors) when number < factor, do: prime_factors
  defp factorize(number, factor, prime_factors) when rem(number, factor) == 0, do: [factor|factorize(div(number, factor), factor, prime_factors)]
  defp factorize(number, factor, prime_factors), do: factorize(number, factor + 1, prime_factors)

  def count_divisors(number), do: Enum.reduce(Map.values(_count(factors_for(number), %{})), 1, fn(x, acc) -> acc * (x + 1) end)
  defp _count([], acc), do: acc
  defp _count([h | t], acc) do
    case Map.has_key?(acc, h) do
      true ->
	{:ok, value} = Map.fetch(acc, h)
	_count(t, %{acc | h => value + 1})
      _ -> _count(t, Map.update(acc, h, 1, &(&1)))
    end
  end

  def first(), do: _first(1, 1, 1)
  defp _first(index, _number, count) when count < 500 do
    value = fetch(index + 1)
    count = count_divisors(value)
    Logger.info("#{index+1}: #{value} - #{count}")
    _first(index + 1, value, count)
  end
  defp _first(_index, number, _count) do
    number
  end
end
