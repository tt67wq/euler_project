defmodule LargestProductInASeries do
  @moduledoc """
  https://projecteuler.net/problem=8
  """
  require Logger

  @digits "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

  def get_n(lst, n) when length(lst) < n, do: []
  def get_n(lst, n), do: get_n(lst, n, 0, [])
  defp get_n(_, n, count, acc) when count == n, do: Enum.reverse(acc)
  defp get_n([h|t], n, count, acc), do: get_n(t, n, count+1, [h|acc])

  def digit_product(num), do: dp(num, 1)
  defp dp(_, 0), do: 0
  defp dp(0, acc), do: acc
  defp dp(num, acc), do: dp(div(num, 10), acc * rem(num, 10))

  def solution(limit) do
    d = String.to_charlist(@digits)
    sl(d, limit, 0)
  end
  defp sl([_h|t]=d, limit, m) do
    lst = get_n(d, limit)
    case lst do
      [] -> m
      _ ->
	n = lst |> List.to_integer() |> digit_product()
	cond do
	  n > m -> sl(t, limit, n)
	  :else -> sl(t, limit, m)
	end
    end
  end
end
